{"version":3,"file":"component---src-pages-index-js-3ad347b3d6e46489d5de.js","mappings":"mLAEO,MAAMA,EAA0BA,KACtC,MAAO,CAAEC,GACRC,oBAAmBC,EAAAA,EAAAA,MAAsB,IAAIC,MAC5C,0DACI,GAEC,OAAAH,CAAA,C,oECJK,MAAAI,EACZC,GAEcC,EAAAA,EAAuBC,WAExBC,UAAUH,E,uDCTxB,MAAMI,EAAaC,GACXA,EAAMC,QAAQ,OAAQ,KAQjBT,EAAmBA,KAC/B,MAAMU,EAAUC,SAASC,OAAOC,MAAM,MAEtC,UAAWD,KAAUF,EAAS,CACvB,MAAAI,EAAQF,EAAOC,MAAM,KAO3B,GAAiB,uBANAN,EAAUO,EAAM,IAAIL,QAAQ,OAAQ,KAMd,CACtC,MAAMD,EAAQM,EAAMC,MAAM,GAAGC,KAAK,KAElC,OAAOT,EAAUC,EACjB,CACD,E,uDCnBW,MAAAS,EAAiBA,CAC7BC,EACAC,IAEOD,EAAID,eAAeE,E,mICE3B,MAAMC,EAAmBC,IAGoC,IAHlB,eAC1CC,EAAA,qBACAC,GAAAF,EAEA,MAAMG,EAAsBF,EAG3B,GAAsB,iBAAfE,GACQ,OAAfA,GACCC,MAAMC,QAAQF,GA6BL,OAAAC,MAAMC,QAAQJ,GACjBA,EAAeK,KAAKC,GACnBR,EAAiB,CACvBE,eAAgBM,EAChBL,2BAIKD,EAnCH,IAAAL,EAAAA,EAAAA,GAAeO,EAAY,gBAAiB,CACzC,MAAAK,GAAc3B,EAAAA,EAAAA,GAAYsB,EAAWM,cAE3C,OAAID,IAIFN,EAAqBQ,OAAS,IAC7BR,EAAqBS,SAASR,EAAWM,cAEnC,KAEAR,EAER,CACK,CACN,MAAMW,EAAU,CAAC,EAEjB,UAAWC,KAAOV,EACTS,EAAAC,GAA+Bd,EAAiB,CACvDE,eAAgBE,EAAWU,GAC3BX,yBAIK,OAAAU,CACP,CAUD,EC3CF,ICACE,EDAD,GCACA,EDXad,IAAe,IAAd,KAAEe,GAAMf,EACrB,OACEgB,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAA,SAAG,sDACHA,EAAAA,cAAA,SAAID,EAAKE,aAAaF,KAAKG,WAAWC,MACrC,ECQsBC,IAC3B,MAAMC,GAAiBtC,EAAAA,EAAAA,IACrBuC,GAAUA,EAAMD,kBAGXE,EAAkBC,GAAuBR,EAAAA,SAE9C,MACIS,EFuCPC,KAEA,MAAML,GAAiBtC,EAAAA,EAAAA,IACrBuC,GAAUA,EAAMD,iBAEZnB,GAAuBnB,EAAAA,EAAAA,IAC3BuC,GAAUA,EAAMpB,uBAEZjB,GAAYF,EAAAA,EAAAA,IAAwBuC,GAAUA,EAAMrC,YAEnD,OAAA+B,EAAAA,SAAc,KACpB,GAAIU,EAAY,CACT,MAAAC,EACLzB,EAAqBQ,OAAS,GAAKkB,OAAOC,KAAK5C,GAAWyB,OAAS,EAEpE,OAAIW,GAAkBM,EACd5B,EAAiB,CACvBE,eAAgByB,EAChBxB,yBAGMwB,CAER,IACC,CAACzC,EAAWiB,EAAsBmB,EAAgBK,GAAY,EE/D7CI,CAA2BV,EAAML,MAoBnD,OAlBDC,EAAAA,WAAgB,KACT,MAAAe,EAAkB,IAAIC,gBAE5B,IAAKX,EAAgB,CACpB,MAAM5C,GAAiBD,EAAAA,EAAAA,KACHgD,IAAE/C,GAElBA,GACI,sDAAiCwD,MAAMC,GAC7CA,EAAIC,QAAQ1D,EAAgBsD,IAG9B,CAEM,UAAMA,EAAgBK,OAAA,GAC3B,CAACf,KAGHgB,EAAAA,EAAAA,KAACvB,EAAA,IACIM,EACJL,KAAMU,EACNa,aAAclB,EAAML,KACpBQ,oBAAmC,E","sources":["webpack://studio-prismic-starter/../../../src/lib/getActiveRepositoryName.ts","webpack://studio-prismic-starter/../../../src/lib/getDocument.ts","webpack://studio-prismic-starter/../../../src/lib/getPreviewCookie.ts","webpack://studio-prismic-starter/../../../src/lib/hasOwnProperty.ts","webpack://studio-prismic-starter/../../src/useMergePrismicPreviewData.ts","webpack://studio-prismic-starter/./src/pages/index.js","webpack://studio-prismic-starter/../../src/withPrismicPreview.tsx"],"sourcesContent":["import { getPreviewCookie } from \"./getPreviewCookie\";\n\nexport const getActiveRepositoryName = (): string | undefined => {\n\tconst [, repositoryName] =\n\t\tdecodeURIComponent(getPreviewCookie() || \"\").match(\n\t\t\t/\"([a-zA-Z0-9][-a-zA-Z0-9]{2,}[a-zA-Z0-9]).prismic.io\"/,\n\t\t) || [];\n\n\treturn repositoryName;\n};\n","import type { NormalizedDocument } from \"../types\";\n\nimport { usePrismicPreviewStore } from \"../usePrismicPreviewStore\";\n\nexport const getDocument = (\n\tprismicId: string,\n): NormalizedDocument | undefined => {\n\tconst state = usePrismicPreviewStore.getState();\n\n\treturn state.documents[prismicId];\n};\n","const readValue = (value: string): string => {\n\treturn value.replace(/%3B/g, \";\");\n};\n\n/**\n * Returns the value of a cookie from a given cookie store.\n *\n * @returns The value of the cookie, if it exists.\n */\nexport const getPreviewCookie = (): string | undefined => {\n\tconst cookies = document.cookie.split(\"; \");\n\n\tfor (const cookie of cookies) {\n\t\tconst parts = cookie.split(\"=\");\n\t\tconst thisName = readValue(parts[0]).replace(/%3D/g, \"=\");\n\n\t\t// The Prismic preview cookie name is hardcoded here to prevent\n\t\t// including `@prismicio/client` in the main \"app.js\" bundle.\n\t\t// Unfortunately, the package is not tree-shaken when only the\n\t\t// cookie name is imported.\n\t\tif (thisName === \"io.prismic.preview\") {\n\t\t\tconst value = parts.slice(1).join(\"=\");\n\n\t\t\treturn readValue(value);\n\t\t}\n\t}\n};\n","/**\n * Determines if an object contains a given property. It augments the provided\n * object's type to include the property.\n *\n * @returns `true` if `obj` contains a `prop` property, `false` otherwise.\n */\nexport const hasOwnProperty = <X extends object, Y extends PropertyKey>(\n\tobj: X,\n\tprop: Y,\n): obj is X & Record<Y, unknown> => {\n\treturn obj.hasOwnProperty(prop);\n};\n","import * as React from \"react\";\n\nimport { getDocument } from \"./lib/getDocument\";\nimport { hasOwnProperty } from \"./lib/hasOwnProperty\";\n\nimport { usePrismicPreviewStore } from \"./usePrismicPreviewStore\";\n\ntype MergePreviewDataArgs<TStaticDataNode> = {\n\tstaticDataNode: TStaticDataNode;\n\tpublishedDocumentIDs: string[];\n};\n\nconst mergePreviewData = <TStaticDataNode>({\n\tstaticDataNode,\n\tpublishedDocumentIDs,\n}: MergePreviewDataArgs<TStaticDataNode>): TStaticDataNode => {\n\tconst castedData: unknown = staticDataNode;\n\n\tif (\n\t\ttypeof castedData === \"object\" &&\n\t\tcastedData !== null &&\n\t\t!Array.isArray(castedData)\n\t) {\n\t\tif (hasOwnProperty(castedData, \"_previewable\")) {\n\t\t\tconst replacement = getDocument(castedData._previewable as string);\n\n\t\t\tif (replacement) {\n\t\t\t\treturn replacement as unknown as typeof staticDataNode;\n\t\t\t} else {\n\t\t\t\tif (\n\t\t\t\t\tpublishedDocumentIDs.length > 0 &&\n\t\t\t\t\t!publishedDocumentIDs.includes(castedData._previewable as string)\n\t\t\t\t) {\n\t\t\t\t\treturn null as unknown as typeof staticDataNode;\n\t\t\t\t} else {\n\t\t\t\t\treturn staticDataNode;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tconst newNode = {} as TStaticDataNode;\n\n\t\t\tfor (const key in castedData) {\n\t\t\t\tnewNode[key as keyof typeof newNode] = mergePreviewData({\n\t\t\t\t\tstaticDataNode: castedData[key as keyof typeof castedData],\n\t\t\t\t\tpublishedDocumentIDs,\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn newNode;\n\t\t}\n\t} else if (Array.isArray(staticDataNode)) {\n\t\treturn staticDataNode.map((element) => {\n\t\t\treturn mergePreviewData({\n\t\t\t\tstaticDataNode: element,\n\t\t\t\tpublishedDocumentIDs,\n\t\t\t});\n\t\t}) as typeof staticDataNode;\n\t} else {\n\t\treturn staticDataNode;\n\t}\n};\n\nexport const useMergePrismicPreviewData = <\n\tTStaticData extends Record<string, unknown>,\n>(\n\tstaticData: TStaticData | undefined,\n): TStaticData | undefined => {\n\tconst isBootstrapped = usePrismicPreviewStore(\n\t\t(state) => state.isBootstrapped,\n\t);\n\tconst publishedDocumentIDs = usePrismicPreviewStore(\n\t\t(state) => state.publishedDocumentIDs,\n\t);\n\tconst documents = usePrismicPreviewStore((state) => state.documents);\n\n\treturn React.useMemo(() => {\n\t\tif (staticData) {\n\t\t\tconst hasPreviewData =\n\t\t\t\tpublishedDocumentIDs.length > 0 || Object.keys(documents).length > 0;\n\n\t\t\tif (isBootstrapped && hasPreviewData) {\n\t\t\t\treturn mergePreviewData({\n\t\t\t\t\tstaticDataNode: staticData,\n\t\t\t\t\tpublishedDocumentIDs,\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\treturn staticData;\n\t\t\t}\n\t\t}\n\t}, [documents, publishedDocumentIDs, isBootstrapped, staticData]);\n};\n","import React from \"react\";\nimport { graphql } from \"gatsby\";\nimport styled from \"styled-components\";\n import { withPrismicPreview } from \"gatsby-plugin-prismic-previews\";\n\nconst Index = ({ data }) => {\n  return (\n    <>\n      <p>TF Transfer 01 - GitHub Clone 2023.10.12 15:40 1.0</p>\n      <p>{data.prismicAbout.data.about_text.text}</p>\n    </>\n  );\n\n}\n\n\nexport default withPrismicPreview(Index);\n\nexport const query = graphql`\n  query MyQuery {\n    prismicAbout {\n      data {\n        about_text {\n          html\n          text\n        }\n      }\n    }\n  }\n`;\n","import * as React from \"react\";\n\nimport { getActiveRepositoryName } from \"./lib/getActiveRepositoryName\";\nimport { getComponentDisplayName } from \"./lib/getComponentDisplayName\";\n\nimport type { PagePropsLike } from \"./types\";\n\nimport { useMergePrismicPreviewData } from \"./useMergePrismicPreviewData\";\nimport { usePrismicPreviewStore } from \"./usePrismicPreviewStore\";\n\nexport type WithPrismicPreviewProps<TProps = Record<string, unknown>> = {\n\toriginalData: TProps;\n\tisPrismicPreview: boolean;\n};\n\nexport const withPrismicPreview = <TProps extends PagePropsLike>(\n\tWrappedComponent: React.ComponentType<TProps>,\n): React.ComponentType<TProps> => {\n\tconst WithPrismicPreview = (props: TProps): JSX.Element => {\n\t\tconst isBootstrapped = usePrismicPreviewStore(\n\t\t\t(state) => state.isBootstrapped,\n\t\t);\n\n\t\tconst [isPrismicPreview, setIsPrismicPreview] = React.useState<\n\t\t\tboolean | null\n\t\t>(null);\n\t\tconst mergedData = useMergePrismicPreviewData(props.data);\n\n\t\tReact.useEffect(() => {\n\t\t\tconst abortController = new AbortController();\n\n\t\t\tif (!isBootstrapped) {\n\t\t\t\tconst repositoryName = getActiveRepositoryName();\n\t\t\t\tsetIsPrismicPreview(!!repositoryName);\n\n\t\t\t\tif (repositoryName) {\n\t\t\t\t\timport(\"./lib/bootstrapPrismicPreview\").then((mod) =>\n\t\t\t\t\t\tmod.default(repositoryName, abortController),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn () => abortController.abort();\n\t\t}, [isBootstrapped]);\n\n\t\treturn (\n\t\t\t<WrappedComponent\n\t\t\t\t{...props}\n\t\t\t\tdata={mergedData}\n\t\t\t\toriginalData={props.data}\n\t\t\t\tisPrismicPreview={isPrismicPreview}\n\t\t\t/>\n\t\t);\n\t};\n\n\tif (process.env.NODE_ENV === \"development\") {\n\t\tconst wrappedComponentName = getComponentDisplayName(WrappedComponent);\n\t\tWithPrismicPreview.displayName = `withPrismicPreview(${wrappedComponentName})`;\n\t}\n\n\treturn WithPrismicPreview;\n};\n"],"names":["getActiveRepositoryName","repositoryName","decodeURIComponent","getPreviewCookie","match","getDocument","prismicId","usePrismicPreviewStore","getState","documents","readValue","value","replace","cookies","document","cookie","split","parts","slice","join","hasOwnProperty","obj","prop","mergePreviewData","_ref","staticDataNode","publishedDocumentIDs","castedData","Array","isArray","map","element","replacement","_previewable","length","includes","newNode","key","WrappedComponent","data","React","prismicAbout","about_text","text","props","isBootstrapped","state","isPrismicPreview","setIsPrismicPreview","mergedData","staticData","hasPreviewData","Object","keys","useMergePrismicPreviewData","abortController","AbortController","then","mod","default","abort","jsx","originalData"],"sourceRoot":""}