{"version":3,"file":"component---src-templates-project-js.js","mappings":"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","sources":["webpack://studio-prismic-starter/../../../src/lib/getActiveRepositoryName.ts","webpack://studio-prismic-starter/../../../src/lib/getComponentDisplayName.ts","webpack://studio-prismic-starter/../../../src/lib/getDocument.ts","webpack://studio-prismic-starter/../../../src/lib/getPreviewCookie.ts","webpack://studio-prismic-starter/../../../src/lib/hasOwnProperty.ts","webpack://studio-prismic-starter/../../src/useMergePrismicPreviewData.ts","webpack://studio-prismic-starter/../../src/withPrismicPreview.tsx","webpack://studio-prismic-starter/./src/templates/project.js"],"sourcesContent":["import { getPreviewCookie } from \"./getPreviewCookie\";\n\nexport const getActiveRepositoryName = (): string | undefined => {\n\tconst [, repositoryName] =\n\t\tdecodeURIComponent(getPreviewCookie() || \"\").match(\n\t\t\t/\"([a-zA-Z0-9][-a-zA-Z0-9]{2,}[a-zA-Z0-9]).prismic.io\"/,\n\t\t) || [];\n\n\treturn repositoryName;\n};\n","/**\n * Returns a component's display name. If none is provided, \"Component\" is\n * returned.\n *\n * @param WrappedComponent - Component from which to get the display name.\n *\n * @returns `WrappedComponent`'s display name.\n */\nexport const getComponentDisplayName = <TProps>(\n\tWrappedComponent: React.ComponentType<TProps>,\n): string =>\n\tWrappedComponent.displayName || WrappedComponent.name || \"Component\";\n","import type { NormalizedDocument } from \"../types\";\n\nimport { usePrismicPreviewStore } from \"../usePrismicPreviewStore\";\n\nexport const getDocument = (\n\tprismicId: string,\n): NormalizedDocument | undefined => {\n\tconst state = usePrismicPreviewStore.getState();\n\n\treturn state.documents[prismicId];\n};\n","const readValue = (value: string): string => {\n\treturn value.replace(/%3B/g, \";\");\n};\n\n/**\n * Returns the value of a cookie from a given cookie store.\n *\n * @returns The value of the cookie, if it exists.\n */\nexport const getPreviewCookie = (): string | undefined => {\n\tconst cookies = document.cookie.split(\"; \");\n\n\tfor (const cookie of cookies) {\n\t\tconst parts = cookie.split(\"=\");\n\t\tconst thisName = readValue(parts[0]).replace(/%3D/g, \"=\");\n\n\t\t// The Prismic preview cookie name is hardcoded here to prevent\n\t\t// including `@prismicio/client` in the main \"app.js\" bundle.\n\t\t// Unfortunately, the package is not tree-shaken when only the\n\t\t// cookie name is imported.\n\t\tif (thisName === \"io.prismic.preview\") {\n\t\t\tconst value = parts.slice(1).join(\"=\");\n\n\t\t\treturn readValue(value);\n\t\t}\n\t}\n};\n","/**\n * Determines if an object contains a given property. It augments the provided\n * object's type to include the property.\n *\n * @returns `true` if `obj` contains a `prop` property, `false` otherwise.\n */\nexport const hasOwnProperty = <X extends object, Y extends PropertyKey>(\n\tobj: X,\n\tprop: Y,\n): obj is X & Record<Y, unknown> => {\n\treturn obj.hasOwnProperty(prop);\n};\n","import * as React from \"react\";\n\nimport { getDocument } from \"./lib/getDocument\";\nimport { hasOwnProperty } from \"./lib/hasOwnProperty\";\n\nimport { usePrismicPreviewStore } from \"./usePrismicPreviewStore\";\n\ntype MergePreviewDataArgs<TStaticDataNode> = {\n\tstaticDataNode: TStaticDataNode;\n\tpublishedDocumentIDs: string[];\n};\n\nconst mergePreviewData = <TStaticDataNode>({\n\tstaticDataNode,\n\tpublishedDocumentIDs,\n}: MergePreviewDataArgs<TStaticDataNode>): TStaticDataNode => {\n\tconst castedData: unknown = staticDataNode;\n\n\tif (\n\t\ttypeof castedData === \"object\" &&\n\t\tcastedData !== null &&\n\t\t!Array.isArray(castedData)\n\t) {\n\t\tif (hasOwnProperty(castedData, \"_previewable\")) {\n\t\t\tconst replacement = getDocument(castedData._previewable as string);\n\n\t\t\tif (replacement) {\n\t\t\t\treturn replacement as unknown as typeof staticDataNode;\n\t\t\t} else {\n\t\t\t\tif (\n\t\t\t\t\tpublishedDocumentIDs.length > 0 &&\n\t\t\t\t\t!publishedDocumentIDs.includes(castedData._previewable as string)\n\t\t\t\t) {\n\t\t\t\t\treturn null as unknown as typeof staticDataNode;\n\t\t\t\t} else {\n\t\t\t\t\treturn staticDataNode;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tconst newNode = {} as TStaticDataNode;\n\n\t\t\tfor (const key in castedData) {\n\t\t\t\tnewNode[key as keyof typeof newNode] = mergePreviewData({\n\t\t\t\t\tstaticDataNode: castedData[key as keyof typeof castedData],\n\t\t\t\t\tpublishedDocumentIDs,\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn newNode;\n\t\t}\n\t} else if (Array.isArray(staticDataNode)) {\n\t\treturn staticDataNode.map((element) => {\n\t\t\treturn mergePreviewData({\n\t\t\t\tstaticDataNode: element,\n\t\t\t\tpublishedDocumentIDs,\n\t\t\t});\n\t\t}) as typeof staticDataNode;\n\t} else {\n\t\treturn staticDataNode;\n\t}\n};\n\nexport const useMergePrismicPreviewData = <\n\tTStaticData extends Record<string, unknown>,\n>(\n\tstaticData: TStaticData | undefined,\n): TStaticData | undefined => {\n\tconst isBootstrapped = usePrismicPreviewStore(\n\t\t(state) => state.isBootstrapped,\n\t);\n\tconst publishedDocumentIDs = usePrismicPreviewStore(\n\t\t(state) => state.publishedDocumentIDs,\n\t);\n\tconst documents = usePrismicPreviewStore((state) => state.documents);\n\n\treturn React.useMemo(() => {\n\t\tif (staticData) {\n\t\t\tconst hasPreviewData =\n\t\t\t\tpublishedDocumentIDs.length > 0 || Object.keys(documents).length > 0;\n\n\t\t\tif (isBootstrapped && hasPreviewData) {\n\t\t\t\treturn mergePreviewData({\n\t\t\t\t\tstaticDataNode: staticData,\n\t\t\t\t\tpublishedDocumentIDs,\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\treturn staticData;\n\t\t\t}\n\t\t}\n\t}, [documents, publishedDocumentIDs, isBootstrapped, staticData]);\n};\n","import * as React from \"react\";\n\nimport { getActiveRepositoryName } from \"./lib/getActiveRepositoryName\";\nimport { getComponentDisplayName } from \"./lib/getComponentDisplayName\";\n\nimport type { PagePropsLike } from \"./types\";\n\nimport { useMergePrismicPreviewData } from \"./useMergePrismicPreviewData\";\nimport { usePrismicPreviewStore } from \"./usePrismicPreviewStore\";\n\nexport type WithPrismicPreviewProps<TProps = Record<string, unknown>> = {\n\toriginalData: TProps;\n\tisPrismicPreview: boolean;\n};\n\nexport const withPrismicPreview = <TProps extends PagePropsLike>(\n\tWrappedComponent: React.ComponentType<TProps>,\n): React.ComponentType<TProps> => {\n\tconst WithPrismicPreview = (props: TProps): JSX.Element => {\n\t\tconst isBootstrapped = usePrismicPreviewStore(\n\t\t\t(state) => state.isBootstrapped,\n\t\t);\n\n\t\tconst [isPrismicPreview, setIsPrismicPreview] = React.useState<\n\t\t\tboolean | null\n\t\t>(null);\n\t\tconst mergedData = useMergePrismicPreviewData(props.data);\n\n\t\tReact.useEffect(() => {\n\t\t\tconst abortController = new AbortController();\n\n\t\t\tif (!isBootstrapped) {\n\t\t\t\tconst repositoryName = getActiveRepositoryName();\n\t\t\t\tsetIsPrismicPreview(!!repositoryName);\n\n\t\t\t\tif (repositoryName) {\n\t\t\t\t\timport(\"./lib/bootstrapPrismicPreview\").then((mod) =>\n\t\t\t\t\t\tmod.default(repositoryName, abortController),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn () => abortController.abort();\n\t\t}, [isBootstrapped]);\n\n\t\treturn (\n\t\t\t<WrappedComponent\n\t\t\t\t{...props}\n\t\t\t\tdata={mergedData}\n\t\t\t\toriginalData={props.data}\n\t\t\t\tisPrismicPreview={isPrismicPreview}\n\t\t\t/>\n\t\t);\n\t};\n\n\tif (process.env.NODE_ENV === \"development\") {\n\t\tconst wrappedComponentName = getComponentDisplayName(WrappedComponent);\n\t\tWithPrismicPreview.displayName = `withPrismicPreview(${wrappedComponentName})`;\n\t}\n\n\treturn WithPrismicPreview;\n};\n","import React from \"react\";\nimport { graphql } from \"gatsby\";\nimport styled from \"styled-components\";\n import { withPrismicPreview } from \"gatsby-plugin-prismic-previews\";\n\nconst Project = () => {\n  return (\n    <>\n      <p>This is a project</p>\n\n    </>\n  );\n\n}\n\n\nexport default withPrismicPreview(Project);\n\n// export const query = graphql`\n//   query MyQuery {\n//     prismicAbout {\n//       data {\n//         about_text {\n//           html\n//           text\n//         }\n//       }\n//     }\n//   }\n// `;\n"],"names":["getActiveRepositoryName","repositoryName","decodeURIComponent","getPreviewCookie","match","getComponentDisplayName","WrappedComponent","displayName","name","getDocument","prismicId","state","usePrismicPreviewStore","getState","documents","readValue","value","replace","cookies","document","cookie","split","parts","thisName","slice","join","hasOwnProperty","obj","prop","mergePreviewData","staticDataNode","publishedDocumentIDs","castedData","Array","isArray","replacement","_previewable","length","includes","newNode","key","map","element","useMergePrismicPreviewData","staticData","isBootstrapped","React","useMemo","hasPreviewData","Object","keys","withPrismicPreview","WithPrismicPreview","props","isPrismicPreview","setIsPrismicPreview","useState","mergedData","data","useEffect","abortController","AbortController","then","mod","default","abort","jsx","originalData","process","env","NODE_ENV","wrappedComponentName","graphql","styled","Project","createElement","Fragment"],"sourceRoot":""}