{"version":3,"file":"component---src-pages-index-js.js","mappings":"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","sources":["webpack://studio-prismic-starter/../../../src/lib/getActiveRepositoryName.ts","webpack://studio-prismic-starter/../../../src/lib/getDocument.ts","webpack://studio-prismic-starter/../../../src/lib/getPreviewCookie.ts","webpack://studio-prismic-starter/../../../src/lib/hasOwnProperty.ts","webpack://studio-prismic-starter/../../src/useMergePrismicPreviewData.ts","webpack://studio-prismic-starter/../../src/withPrismicPreview.tsx","webpack://studio-prismic-starter/./src/pages/index.js"],"sourcesContent":["import { getPreviewCookie } from \"./getPreviewCookie\";\n\nexport const getActiveRepositoryName = (): string | undefined => {\n\tconst [, repositoryName] =\n\t\tdecodeURIComponent(getPreviewCookie() || \"\").match(\n\t\t\t/\"([a-zA-Z0-9][-a-zA-Z0-9]{2,}[a-zA-Z0-9]).prismic.io\"/,\n\t\t) || [];\n\n\treturn repositoryName;\n};\n","import type { NormalizedDocument } from \"../types\";\n\nimport { usePrismicPreviewStore } from \"../usePrismicPreviewStore\";\n\nexport const getDocument = (\n\tprismicId: string,\n): NormalizedDocument | undefined => {\n\tconst state = usePrismicPreviewStore.getState();\n\n\treturn state.documents[prismicId];\n};\n","const readValue = (value: string): string => {\n\treturn value.replace(/%3B/g, \";\");\n};\n\n/**\n * Returns the value of a cookie from a given cookie store.\n *\n * @returns The value of the cookie, if it exists.\n */\nexport const getPreviewCookie = (): string | undefined => {\n\tconst cookies = document.cookie.split(\"; \");\n\n\tfor (const cookie of cookies) {\n\t\tconst parts = cookie.split(\"=\");\n\t\tconst thisName = readValue(parts[0]).replace(/%3D/g, \"=\");\n\n\t\t// The Prismic preview cookie name is hardcoded here to prevent\n\t\t// including `@prismicio/client` in the main \"app.js\" bundle.\n\t\t// Unfortunately, the package is not tree-shaken when only the\n\t\t// cookie name is imported.\n\t\tif (thisName === \"io.prismic.preview\") {\n\t\t\tconst value = parts.slice(1).join(\"=\");\n\n\t\t\treturn readValue(value);\n\t\t}\n\t}\n};\n","/**\n * Determines if an object contains a given property. It augments the provided\n * object's type to include the property.\n *\n * @returns `true` if `obj` contains a `prop` property, `false` otherwise.\n */\nexport const hasOwnProperty = <X extends object, Y extends PropertyKey>(\n\tobj: X,\n\tprop: Y,\n): obj is X & Record<Y, unknown> => {\n\treturn obj.hasOwnProperty(prop);\n};\n","import * as React from \"react\";\n\nimport { getDocument } from \"./lib/getDocument\";\nimport { hasOwnProperty } from \"./lib/hasOwnProperty\";\n\nimport { usePrismicPreviewStore } from \"./usePrismicPreviewStore\";\n\ntype MergePreviewDataArgs<TStaticDataNode> = {\n\tstaticDataNode: TStaticDataNode;\n\tpublishedDocumentIDs: string[];\n};\n\nconst mergePreviewData = <TStaticDataNode>({\n\tstaticDataNode,\n\tpublishedDocumentIDs,\n}: MergePreviewDataArgs<TStaticDataNode>): TStaticDataNode => {\n\tconst castedData: unknown = staticDataNode;\n\n\tif (\n\t\ttypeof castedData === \"object\" &&\n\t\tcastedData !== null &&\n\t\t!Array.isArray(castedData)\n\t) {\n\t\tif (hasOwnProperty(castedData, \"_previewable\")) {\n\t\t\tconst replacement = getDocument(castedData._previewable as string);\n\n\t\t\tif (replacement) {\n\t\t\t\treturn replacement as unknown as typeof staticDataNode;\n\t\t\t} else {\n\t\t\t\tif (\n\t\t\t\t\tpublishedDocumentIDs.length > 0 &&\n\t\t\t\t\t!publishedDocumentIDs.includes(castedData._previewable as string)\n\t\t\t\t) {\n\t\t\t\t\treturn null as unknown as typeof staticDataNode;\n\t\t\t\t} else {\n\t\t\t\t\treturn staticDataNode;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tconst newNode = {} as TStaticDataNode;\n\n\t\t\tfor (const key in castedData) {\n\t\t\t\tnewNode[key as keyof typeof newNode] = mergePreviewData({\n\t\t\t\t\tstaticDataNode: castedData[key as keyof typeof castedData],\n\t\t\t\t\tpublishedDocumentIDs,\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn newNode;\n\t\t}\n\t} else if (Array.isArray(staticDataNode)) {\n\t\treturn staticDataNode.map((element) => {\n\t\t\treturn mergePreviewData({\n\t\t\t\tstaticDataNode: element,\n\t\t\t\tpublishedDocumentIDs,\n\t\t\t});\n\t\t}) as typeof staticDataNode;\n\t} else {\n\t\treturn staticDataNode;\n\t}\n};\n\nexport const useMergePrismicPreviewData = <\n\tTStaticData extends Record<string, unknown>,\n>(\n\tstaticData: TStaticData | undefined,\n): TStaticData | undefined => {\n\tconst isBootstrapped = usePrismicPreviewStore(\n\t\t(state) => state.isBootstrapped,\n\t);\n\tconst publishedDocumentIDs = usePrismicPreviewStore(\n\t\t(state) => state.publishedDocumentIDs,\n\t);\n\tconst documents = usePrismicPreviewStore((state) => state.documents);\n\n\treturn React.useMemo(() => {\n\t\tif (staticData) {\n\t\t\tconst hasPreviewData =\n\t\t\t\tpublishedDocumentIDs.length > 0 || Object.keys(documents).length > 0;\n\n\t\t\tif (isBootstrapped && hasPreviewData) {\n\t\t\t\treturn mergePreviewData({\n\t\t\t\t\tstaticDataNode: staticData,\n\t\t\t\t\tpublishedDocumentIDs,\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\treturn staticData;\n\t\t\t}\n\t\t}\n\t}, [documents, publishedDocumentIDs, isBootstrapped, staticData]);\n};\n","import * as React from \"react\";\n\nimport { getActiveRepositoryName } from \"./lib/getActiveRepositoryName\";\nimport { getComponentDisplayName } from \"./lib/getComponentDisplayName\";\n\nimport type { PagePropsLike } from \"./types\";\n\nimport { useMergePrismicPreviewData } from \"./useMergePrismicPreviewData\";\nimport { usePrismicPreviewStore } from \"./usePrismicPreviewStore\";\n\nexport type WithPrismicPreviewProps<TProps = Record<string, unknown>> = {\n\toriginalData: TProps;\n\tisPrismicPreview: boolean;\n};\n\nexport const withPrismicPreview = <TProps extends PagePropsLike>(\n\tWrappedComponent: React.ComponentType<TProps>,\n): React.ComponentType<TProps> => {\n\tconst WithPrismicPreview = (props: TProps): JSX.Element => {\n\t\tconst isBootstrapped = usePrismicPreviewStore(\n\t\t\t(state) => state.isBootstrapped,\n\t\t);\n\n\t\tconst [isPrismicPreview, setIsPrismicPreview] = React.useState<\n\t\t\tboolean | null\n\t\t>(null);\n\t\tconst mergedData = useMergePrismicPreviewData(props.data);\n\n\t\tReact.useEffect(() => {\n\t\t\tconst abortController = new AbortController();\n\n\t\t\tif (!isBootstrapped) {\n\t\t\t\tconst repositoryName = getActiveRepositoryName();\n\t\t\t\tsetIsPrismicPreview(!!repositoryName);\n\n\t\t\t\tif (repositoryName) {\n\t\t\t\t\timport(\"./lib/bootstrapPrismicPreview\").then((mod) =>\n\t\t\t\t\t\tmod.default(repositoryName, abortController),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn () => abortController.abort();\n\t\t}, [isBootstrapped]);\n\n\t\treturn (\n\t\t\t<WrappedComponent\n\t\t\t\t{...props}\n\t\t\t\tdata={mergedData}\n\t\t\t\toriginalData={props.data}\n\t\t\t\tisPrismicPreview={isPrismicPreview}\n\t\t\t/>\n\t\t);\n\t};\n\n\tif (process.env.NODE_ENV === \"development\") {\n\t\tconst wrappedComponentName = getComponentDisplayName(WrappedComponent);\n\t\tWithPrismicPreview.displayName = `withPrismicPreview(${wrappedComponentName})`;\n\t}\n\n\treturn WithPrismicPreview;\n};\n","import React from \"react\";\nimport { graphql } from \"gatsby\";\nimport styled from \"styled-components\";\n import { withPrismicPreview } from \"gatsby-plugin-prismic-previews\";\n\nconst Index = ({ data }) => {\n  return (\n    <>\n      <p>TF Transfer 01 - GitHub Clone 2023.10.12 15:40 1.0</p>\n      {/* <p>{data.prismicAbout.data.about_text.text}</p> */}\n    </>\n  );\n\n}\n\n\nexport default withPrismicPreview(Index);\n\n// export const query = graphql`\n//   query MyQuery {\n//     prismicAbout {\n//       data {\n//         about_text {\n//           html\n//           text\n//         }\n//       }\n//     }\n//   }\n// `;\n"],"names":["getActiveRepositoryName","repositoryName","decodeURIComponent","getPreviewCookie","match","getDocument","prismicId","state","usePrismicPreviewStore","getState","documents","readValue","value","replace","cookies","document","cookie","split","parts","thisName","slice","join","hasOwnProperty","obj","prop","mergePreviewData","staticDataNode","publishedDocumentIDs","castedData","Array","isArray","replacement","_previewable","length","includes","newNode","key","map","element","useMergePrismicPreviewData","staticData","isBootstrapped","React","useMemo","hasPreviewData","Object","keys","withPrismicPreview","WrappedComponent","WithPrismicPreview","props","isPrismicPreview","setIsPrismicPreview","useState","mergedData","data","useEffect","abortController","AbortController","then","mod","default","abort","jsx","originalData","process","env","NODE_ENV","wrappedComponentName","getComponentDisplayName","displayName","graphql","styled","Index","createElement","Fragment"],"sourceRoot":""}